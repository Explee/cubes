// Generated by CoffeeScript 1.10.0
(function() {
  var Map,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Map = (function() {
    function Map(ctx, width, height, tiles) {
      this.ctx = ctx;
      this.tiles = tiles != null ? tiles : [];
      this.sizeCase = 50;
      this.widthMap = Math.round(width / this.sizeCase);
      this.heightMap = Math.round(height / this.sizeCase);
      this.tiles = [];
      this.spritesheet = new Spritesheet('img/spriteGlobal.png', 10);
    }

    Map.prototype.init = function() {
      var centerX, centerY, i, j, l, m, mapElement, n, o, p, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, results, results1, results2, tempArray;
      centerX = Math.round(this.widthMap / 2) - 2;
      centerY = Math.floor(this.heightMap / 2);
      for (i = l = 0, ref = this.widthMap; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        tempArray = [];
        for (j = m = 0, ref1 = this.heightMap; 0 <= ref1 ? m <= ref1 : m >= ref1; j = 0 <= ref1 ? ++m : --m) {
          if (indexOf.call((function() {
            results = [];
            for (var n = ref2 = centerX - 1, ref3 = centerX + 2; ref2 <= ref3 ? n <= ref3 : n >= ref3; ref2 <= ref3 ? n++ : n--){ results.push(n); }
            return results;
          }).apply(this), i) >= 0 && indexOf.call((function() {
            results1 = [];
            for (var o = ref4 = centerY - 1, ref5 = centerY + 2; ref4 <= ref5 ? o <= ref5 : o >= ref5; ref4 <= ref5 ? o++ : o--){ results1.push(o); }
            return results1;
          }).apply(this), j) >= 0) {
            r = Math.random();
            if (r <= 0.05) {
              mapElement = new MapElement('mountain', this.spritesheet, this.sizeCase);
            } else if (r > 0.1 && r < 0.2) {
              mapElement = new MapElement('sand', this.spritesheet, this.sizeCase);
            } else {
              mapElement = new MapElement('grass', this.spritesheet, this.sizeCase);
            }
          } else {
            mapElement = new MapElement('water', this.spritesheet, this.sizeCase);
          }
          tempArray.push(mapElement);
        }
        this.tiles.push(tempArray);
      }
      results2 = [];
      for (i = p = 0, ref6 = this.widthMap; 0 <= ref6 ? p <= ref6 : p >= ref6; i = 0 <= ref6 ? ++p : --p) {
        results2.push((function() {
          var q, ref7, results3;
          results3 = [];
          for (j = q = 0, ref7 = this.heightMap; 0 <= ref7 ? q <= ref7 : q >= ref7; j = 0 <= ref7 ? ++q : --q) {
            results3.push(this.addShiny(i, j));
          }
          return results3;
        }).call(this));
      }
      return results2;
    };

    Map.prototype.addShiny = function(i, j) {
      var k, l, m, n, o, r, results;
      if (this.tiles[i][j].type !== 'water') {
        if ((this.tiles[i - 1][j] != null) && this.tiles[i - 1][j].type !== this.tiles[i][j].type) {
          for (k = l = 0; l <= 4; k = ++l) {
            r = Math.random();
            if (r > 0.7) {
              this.tiles[i][j].changePixel(0, k, this.tiles[i - 1][j].sprites);
            }
          }
        }
        if ((this.tiles[i + 1][j] != null) && this.tiles[i + 1][j].type !== this.tiles[i][j].type) {
          for (k = m = 0; m <= 4; k = ++m) {
            r = Math.random();
            if (r > 0.7) {
              this.tiles[i][j].changePixel(4, k, this.tiles[i + 1][j].sprites);
            }
          }
        }
        if ((this.tiles[i][j - 1] != null) && this.tiles[i][j - 1].type !== this.tiles[i][j].type) {
          for (k = n = 0; n <= 4; k = ++n) {
            r = Math.random();
            if (r > 0.7) {
              this.tiles[i][j].changePixel(k, 0, this.tiles[i][j - 1].sprites);
            }
          }
        }
        if ((this.tiles[i][j + 1] != null) && this.tiles[i][j + 1].type !== this.tiles[i][j].type) {
          results = [];
          for (k = o = 0; o <= 4; k = ++o) {
            r = Math.random();
            if (r > 0.7) {
              results.push(this.tiles[i][j].changePixel(k, 4, this.tiles[i][j + 1].sprites));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      }
    };

    Map.prototype.randomMap = function() {
      return console.log('randomize');
    };

    Map.prototype.addMapElement = function(type, i, j) {
      this.tiles[i][j] = new MapElement(type, this.spritesheet, this.sizeCase);
      this.addShiny(i, j);
      return this.draw();
    };

    Map.prototype.draw = function() {
      var i, j, l, ref, results;
      results = [];
      for (i = l = 0, ref = this.widthMap; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
        results.push((function() {
          var m, ref1, results1;
          results1 = [];
          for (j = m = 0, ref1 = this.heightMap; 0 <= ref1 ? m <= ref1 : m >= ref1; j = 0 <= ref1 ? ++m : --m) {
            results1.push(this.tiles[i][j].draw(this.ctx, i, j));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return Map;

  })();

  window.Map = Map;

}).call(this);
