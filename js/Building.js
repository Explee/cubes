// Generated by CoffeeScript 1.10.0
(function() {
  var Building;

  Building = (function() {
    function Building(type, spritesheet) {
      var BUILDING_TYPE_FARM, BUILDING_TYPE_GRANARY, BUILDING_TYPE_HARBOR, BUILDING_TYPE_HOUSE, BUILDING_TYPE_HUNTING_LODGE, BUILDING_TYPE_PASTURE, BUILDING_TYPE_SAWMILL, BUILDING_TYPE_TEMPLE, aa, ab, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, z;
      this.type = type;
      this.spriteElems = [];
      this.posX = 0;
      this.posY = 0;
      BUILDING_TYPE_TEMPLE = 0;
      BUILDING_TYPE_HOUSE = 1;
      BUILDING_TYPE_FARM = 2;
      BUILDING_TYPE_GRANARY = 3;
      BUILDING_TYPE_PASTURE = 4;
      BUILDING_TYPE_SAWMILL = 5;
      BUILDING_TYPE_HUNTING_LODGE = 6;
      BUILDING_TYPE_HARBOR = 7;
      switch (this.type) {
        case BUILDING_TYPE_TEMPLE:
          for (j = k = 0; k <= 1; j = ++k) {
            for (i = l = 0; l <= 1; i = ++l) {
              this.spriteElems.push(new SpriteElement(spritesheet, i, j));
            }
          }
          break;
        case BUILDING_TYPE_HOUSE:
          for (j = m = 0; m <= 1; j = ++m) {
            for (i = n = 0; n <= 1; i = ++n) {
              this.spriteElems.push(new SpriteElement(spritesheet, i, 2 + j));
            }
          }
          break;
        case BUILDING_TYPE_GRANARY:
          for (j = o = 0; o <= 1; j = ++o) {
            for (i = p = 0; p <= 1; i = ++p) {
              this.spriteElems.push(new SpriteElement(spritesheet, i, 4 + j));
            }
          }
          break;
        case BUILDING_TYPE_FARM:
          for (j = q = 0; q <= 1; j = ++q) {
            for (i = r = 0; r <= 1; i = ++r) {
              this.spriteElems.push(new SpriteElement(spritesheet, i, 6 + j));
            }
          }
          break;
        case BUILDING_TYPE_PASTURE:
          for (j = s = 0; s <= 1; j = ++s) {
            for (i = t = 0; t <= 1; i = ++t) {
              this.spriteElems.push(new SpriteElement(spritesheet, i, 8 + j));
            }
          }
          break;
        case BUILDING_TYPE_SAWMILL:
          for (j = u = 0; u <= 1; j = ++u) {
            for (i = v = 0; v <= 1; i = ++v) {
              this.spriteElems.push(new SpriteElement(spritesheet, i, 10 + j));
            }
          }
          break;
        case BUILDING_TYPE_HUNTING_LODGE:
          for (j = w = 0; w <= 1; j = ++w) {
            for (i = z = 0; z <= 1; i = ++z) {
              this.spriteElems.push(new SpriteElement(spritesheet, i, 12 + j));
            }
          }
          break;
        case BUILDING_TYPE_HARBOR:
          for (j = aa = 0; aa <= 1; j = ++aa) {
            for (i = ab = 0; ab <= 1; i = ++ab) {
              this.spriteElems.push(new SpriteElement(spritesheet, i, 14 + j));
            }
          }
      }
    }

    Building.prototype.draw = function(ctx) {
      var x, y;
      x = this.posX * 50 + 2 * 10;
      y = this.posY * 50 + 2 * 10;
      ctx.drawImage(this.spriteElems[0].spritesheet.image, this.spriteElems[0].i * 10, this.spriteElems[0].j * 10, 10, 10, x, y, 10, 10);
      ctx.drawImage(this.spriteElems[1].spritesheet.image, this.spriteElems[1].i * 10, this.spriteElems[1].j * 10, 10, 10, x + 10, y, 10, 10);
      ctx.drawImage(this.spriteElems[2].spritesheet.image, this.spriteElems[2].i * 10, this.spriteElems[2].j * 10, 10, 10, x, y + 10, 10, 10);
      return ctx.drawImage(this.spriteElems[3].spritesheet.image, this.spriteElems[3].i * 10, this.spriteElems[3].j * 10, 10, 10, x + 10, y + 10, 10, 10);
    };

    return Building;

  })();

  if (typeof module !== 'undefined' && module.exports) {
    exports.Building = Building;
  } else {
    window.Building = Building;
  }

}).call(this);
